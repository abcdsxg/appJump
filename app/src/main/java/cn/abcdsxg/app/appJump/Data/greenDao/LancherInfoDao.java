package cn.abcdsxg.app.appJump.Data.greenDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LANCHER_INFO".
*/
public class LancherInfoDao extends AbstractDao<LancherInfo, Long> {

    public static final String TABLENAME = "LANCHER_INFO";

    /**
     * Properties of entity LancherInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "title");
        public final static Property Intent = new Property(2, String.class, "intent", false, "intent");
        public final static Property PkgName = new Property(3, String.class, "pkgName", false, "pkgName");
        public final static Property ItemType = new Property(4, int.class, "itemType", false, "itemType");
        public final static Property IconType = new Property(5, int.class, "iconType", false, "iconType");
        public final static Property IconPkg = new Property(6, String.class, "iconPkg", false, "iconPkg");
        public final static Property IconRes = new Property(7, String.class, "iconRes", false, "iconRes");
        public final static Property IconData = new Property(8, byte[].class, "iconData", false, "iconData");
        public final static Property Uri = new Property(9, String.class, "uri", false, "uri");
        public final static Property Flag = new Property(10, int.class, "flag", false, "flag");
        public final static Property ModDate = new Property(11, long.class, "modDate", false, "modDate");
        public final static Property Position = new Property(12, int.class, "position", false, "position");
        public final static Property Page = new Property(13, String.class, "page", false, "page");
    }


    public LancherInfoDao(DaoConfig config) {
        super(config);
    }
    
    public LancherInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LANCHER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"title\" TEXT," + // 1: title
                "\"intent\" TEXT," + // 2: intent
                "\"pkgName\" TEXT," + // 3: pkgName
                "\"itemType\" INTEGER NOT NULL ," + // 4: itemType
                "\"iconType\" INTEGER NOT NULL ," + // 5: iconType
                "\"iconPkg\" TEXT," + // 6: iconPkg
                "\"iconRes\" TEXT," + // 7: iconRes
                "\"iconData\" BLOB," + // 8: iconData
                "\"uri\" TEXT," + // 9: uri
                "\"flag\" INTEGER NOT NULL ," + // 10: flag
                "\"modDate\" INTEGER NOT NULL ," + // 11: modDate
                "\"position\" INTEGER NOT NULL ," + // 12: position
                "\"page\" TEXT);"); // 13: page
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LANCHER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LancherInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String intent = entity.getIntent();
        if (intent != null) {
            stmt.bindString(3, intent);
        }
 
        String pkgName = entity.getPkgName();
        if (pkgName != null) {
            stmt.bindString(4, pkgName);
        }
        stmt.bindLong(5, entity.getItemType());
        stmt.bindLong(6, entity.getIconType());
 
        String iconPkg = entity.getIconPkg();
        if (iconPkg != null) {
            stmt.bindString(7, iconPkg);
        }
 
        String iconRes = entity.getIconRes();
        if (iconRes != null) {
            stmt.bindString(8, iconRes);
        }
 
        byte[] iconData = entity.getIconData();
        if (iconData != null) {
            stmt.bindBlob(9, iconData);
        }
 
        String uri = entity.getUri();
        if (uri != null) {
            stmt.bindString(10, uri);
        }
        stmt.bindLong(11, entity.getFlag());
        stmt.bindLong(12, entity.getModDate());
        stmt.bindLong(13, entity.getPosition());
 
        String page = entity.getPage();
        if (page != null) {
            stmt.bindString(14, page);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LancherInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String intent = entity.getIntent();
        if (intent != null) {
            stmt.bindString(3, intent);
        }
 
        String pkgName = entity.getPkgName();
        if (pkgName != null) {
            stmt.bindString(4, pkgName);
        }
        stmt.bindLong(5, entity.getItemType());
        stmt.bindLong(6, entity.getIconType());
 
        String iconPkg = entity.getIconPkg();
        if (iconPkg != null) {
            stmt.bindString(7, iconPkg);
        }
 
        String iconRes = entity.getIconRes();
        if (iconRes != null) {
            stmt.bindString(8, iconRes);
        }
 
        byte[] iconData = entity.getIconData();
        if (iconData != null) {
            stmt.bindBlob(9, iconData);
        }
 
        String uri = entity.getUri();
        if (uri != null) {
            stmt.bindString(10, uri);
        }
        stmt.bindLong(11, entity.getFlag());
        stmt.bindLong(12, entity.getModDate());
        stmt.bindLong(13, entity.getPosition());
 
        String page = entity.getPage();
        if (page != null) {
            stmt.bindString(14, page);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LancherInfo readEntity(Cursor cursor, int offset) {
        LancherInfo entity = new LancherInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // intent
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pkgName
            cursor.getInt(offset + 4), // itemType
            cursor.getInt(offset + 5), // iconType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // iconPkg
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // iconRes
            cursor.isNull(offset + 8) ? null : cursor.getBlob(offset + 8), // iconData
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // uri
            cursor.getInt(offset + 10), // flag
            cursor.getLong(offset + 11), // modDate
            cursor.getInt(offset + 12), // position
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // page
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LancherInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIntent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPkgName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setItemType(cursor.getInt(offset + 4));
        entity.setIconType(cursor.getInt(offset + 5));
        entity.setIconPkg(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIconRes(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setIconData(cursor.isNull(offset + 8) ? null : cursor.getBlob(offset + 8));
        entity.setUri(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFlag(cursor.getInt(offset + 10));
        entity.setModDate(cursor.getLong(offset + 11));
        entity.setPosition(cursor.getInt(offset + 12));
        entity.setPage(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LancherInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LancherInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LancherInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
